
See LICENSE file for licensing information.

-------------------------------------------------------------------------------


The tools in this software implement various reconstruction algorithms. 
Please cite the corresponding articles when using these tools for research.
Some references can be found at the end of this file. The source code might
provide more detailed references, e.g. for specific iterative algorithms.


Direct questions and feedback to: Martin Uecker <uecker@eecs.berkeley.edu>






Prerequesites:

GCC compiler, the FFTW, GSL (or ACML) libraries and optionally 
a CUDA Implementation (see recon/Makefile to turn these
options on or off)

The software can be used in combination with Matlab or octave.



Linux:

The software tools in recon should run on any recent Linux distribution.

To install the required libraries on Debian and Ubuntu run:

sudo apt-get install libfftw3-dev
sudo apt-get install libgsl0-dev
sudo apt-get install liblapack-dev

(optional)
sudo apt-get install octave

(optional)
install the ISMRM Raw Data format library (http://ismrmrd.sourceforge.net/).



Mac OS X: 

Xcode is required and it is recommended to install a newer version 
of gcc (4.7 seems to work) from MacPorts (http://www.macports.org/).


sudo port install fftw-3-single
sudo port install gsl
sudo port install gcc47
sudo port select --set gcc mp-gcc47

(optional)
sudo apt-get install octave

(optional)
install the ISMRM Raw Data format library (http://ismrmrd.sourceforge.net/).





Organization:

recon/			main directory / built software tools
recon/Makefile		Makefile
recon/matlab 		Matlab helper scripts 
recon/src/		source code
recon/src/calib 	source code for sensitivity calibration
recon/src/sense		source code for SENSE or ESPIRiT reconstruction
recon/src/noir		source code for nonlinear inversion
recon/src/sake		source code for SAKE reconstruction
recon/src/wavelet2	source code for wavelets
recon/src/num		base library with numerical functions
recon/src/iter		iterative algorithms
recon/src/misc		miscellaneous (e.g. I/O)
recon/src/ismrm		support for ISMRM raw data format
recon/lib/		built software libraries







Getting started:



# Build the reconstruction tools

make

# Optionally build ISMRM raw data import tool
make ismrmrd


# Set the TOOLBOX_PATH and to the base directoy 
# and add it to the PATH variable.

. vars.sh



% Examples

% Download and unpack the examples which demonstrate
% interoperability with Matlab.

% In Matlab run:
% (you need to start Matlab with TOOLBOX_PATH set, e.g. from a
% terminal after typing '. vars.sh' to setup the paths)

examples


% Use Matlab to read and visualize/process files.

% Setup the path in Matlab:

addpath(strcat(getenv('TOOLBOX_PATH'), '/matlab'));

% Read data file xyz (see below):

A = readcfl('xyz');	% use name 'xyz' without file extension







Data format:

The input and output datasets are each stored in a pair of files: one
header (*.hdr) and one raw data (*.cfl). The header is a simple text
readable file that describes the dimensions of the data. The raw data
file is a binary file containing a single contiguous block of array
data of dimensions described in the header stored in column-major order
(first index is sequential). The raw data file is complex float 
(32 bit real + 32 bit imaginary, IEEE 747 binary32 little-endian).

Convenience methods to read and write our data files using Matlab may
be found in recon/matlab (readcfl.m and writecfl.m).




Command-line tools:

All tools operate on the simple file format given above. Indices and
dimensions run from 0 to N-1. Sometimes a set of dimensions is given
as a bitmask where the lowest bit corresponds to the 0st dimension.




- Basic tools -


bitmask -b <bitmask> | <dim1> ... <dimN>

	Compute bitmask for specified dimensions.


conv bitmask <input> <kernel> <output>

	Performs a convolution along selected dimensions.

	-i	inverse
	-h	help


creal <input> <output>

	Real value.


crop dimension size <input> <output>

	Extracts a sub-array corresponding to the central part of
	{size} along {dimension}.


resize [-c] dimension size <input> <output>

	Resizes an array along {dimension} to {size} by truncation or
	zero padding.


slice dimension position <input> <output>

	Extracts a slice from {position} along {dimension}.


extract dimension start end <input> <output>

	Extracts a sub-array along {dim} from index {start} to {end}.


flip bitmask <input> <output>

	Flip (reverse) dimensions specified by the {bitmask}.


threshold [-j bitmask] lambda <input> <output>

	Perform softthresholding with parameter lambda.

	-j bitmask	joint thresholding
	-h	help


transpose dim1 dim2 <input> <output>

	Tranpose dimensions {dim1} and {dim2}.


join dimension <input1> ... <inputn> <output>

	Join input files along {dimenions}. All other dimensions
	must have the same size.


repmat dimension repetitions <input> <output>

	Repeat input array multiple times.


sdot [-h] <input1> <input2>

	Compute dot product along selected dimensions.

	-h	help


circshift dim shift <input> <output>

	Perform circular shift along {dim} by {shift} elements.


zeros dims dim1 ... dimn name

	Create a zero-filled array with {dims} dimensions of
	size {dim1} to {dimn}.


scale factor <input> <output>

	Scale array by {factor}. The scale factor can be a complex 
	number.


saxpy scale <input1> <input2> <output>

	Multiply input1 with scale factor and add input2.


fmac [-A] [-C] [-s bitmask] <input1> <input2> <output>

	Multiply and accumulate.

	-C	conjugate second argument
	-A	add to output
	-s	squash selected dimensions


conj <input> <output>

	Compute complex conjugate.


fft [-u] [-i] bitmask <input> <output>

	Performs a fast Fourier transform (FFT) along dimensions
	selected by the {bitmask}. There are two options:

	-u	unitary
	-i	inverse


fftmod bitmask <input> <output>

	Apply 1 -1 modulation along dimensions selected by the
	{bitmask}.


ones dims dim1 ... dimn name

	Create a array filled with ones with {dims} dimensions of size {dim1} to {dimn}.



-- MRI calibration and reconstruction ---



rss dim <input> <output>

	Calculates root of sum of squares along {dim}.


homodyne dim fraction <input> <output>

	Performs homodyne reconstruction along {dim}. Where {fraction}
	describes how much of k-space has been acquired along this 
	dimension.


pattern <kspace> <pattern>

	Compute sampling pattern from kspace


caldir cal_size <input> <output>

	Estimates coil sensitivities from the k-space center using
	a direct method (McKenzie et al.). The size of the fully-sampled
	calibration region is automatically determined but limited by 
	{cal_size} (e.g. in the readout direction).


walsh [-r cal. size] [-b block size] <input> <output>

	Estimate coil sensitivities using walsh method (use with ecaltwo).

	-r cal_size	Limits the size of the calibration region.
	-b block_size	Block size.


ecalib [-t threshold] [-c crop_value] [-k kernel_size] [-r cal_size] [-m maps] <kspace> <sensitivites> [<ev-maps>]

	Estimate coil sensitivities using ESPIRiT calibration.
	Optionally outputs the eigenvalue maps.

	-t threshold	This determined the size of the null-space.
	-c crop_value	Crop the sensitivities if the eigenvalue is smaller than {crop_value}.
	-k ksize	kernel size
	-r cal_size	Limits the size of the calibration region.
	-m maps		Number of maps to compute.
	-1 perform only first part of the calibration


ecaltwo [-c crop] [-m maps] x y z <input> <sensitivities> [<ev_maps>]

	Second part of ESPIRiT calibration.
	Optionally outputs the eigenvalue maps.

	-c crop_value	Crop the sensitivities if the eigenvalue is smaller than {crop_value}.
	-m maps		Number of maps to compute.

	
scc [-v] [-A] [-r cal_size] [-P num_coeffs] <kspace> <coeff>|<proj_kspace>

	Performs simple coil compression.

	-P N	perform compression to N virtual channels
	-r S	size of calibration region
	-A	use all data to compute coefficients
	-v	verbose
	-h	help


sense [-l1/-l2] [-r lambda] [-c] <kspace> <sensitivities> <output>

	Perform iterative SENSE/ESPIRiT reconstruction.

	-l1/-l2		toggle l1-wavelet or l2 regularization.
	-r lambda	regularization parameter
	-c		real-value constraint


rsense [-l1/-l2] [-r lambda] [-c] <kspace> <sensitivities> <output>

	Perform iterative SENSE/ESPIRiT reconstruction. The read
	(0th) dimension is Fourier transformed and each section
	perpendicular to this dimension is reconstructed separately.

	-l1/-l2		toggle l1-wavelet or l2 regularization.
	-r lambda	regularization parameter
	-c		real-value constraint


bpsense [-g] [-r l2lambda] [-c] [-e eps] [-u rho] <kspace> <sensitivities> <output>

	Perform basis pursuit denoising for SENSE/ESPIRiT reconstruction:
	min_x ||T x||_1 + lambda/2 ||x||_2^2 subject to: ||y - Ax||_2 <= eps

	-e eps	data consistency error
	-r lambda	l2 regularization parameter
	-u rho	ADMM penalty parameter
	-c	real-value constraint
	-t	use TV norm
	-F	truth image


nlinv [-i iterations] <kspace> <output> [<sens>]

	Jointly estimate image and sensitivities with nonlinear
	inversion using {iter} iteration steps. Optionally outputs 
	the sensitivities.


pocsense alpha iter <kspace> <sens> <output>

	Perform POCSENSE reconstruction using {iter} iterations
	and regularization parameter {alpha}.


itsense alpha <sensitivities> <kspace> <pattern> <image>

	A simplified implementation of iterative sense reconstruction
	with l2-regularization.
	

sake [-i iterations] [-s rel. subspace] <kspace> <output>

	Use SAKE algorithm to recover a full k-space from undersampled
	data using low-rank matrix completion.

	-i		number of iterations
	-s		rel. size of the signal subspace


nufft <traj> <input> <output>

	Performs non-uniform Fast Fourier Transform. 

	-a		adjoint
	-i		iterative gridding
	-t		toeplitz
	-d x:y:z	dimensions
	-l lambda 	l2 regularization
	-h		help


rof <lambda> <flags> <input> <output>

	Perform total variation denoising along dims <flags>.


poisson <outfile>

Computes Poisson-disc sampling pattern.

	-X	size dimension 0 (readout)
	-Y	size dimension 1 (phase)
	-x	acceleration (dim 0)
	-y	acceleration (dim 1)
	-C	size of calibration region
	-v	variable density
	-e	elliptical scanning
	-h	help


phantom [-k | -s nc] [-t trajectory] <output>

	Simulate various stuff.

	-s nc	nc sensitivities
	-k	k-space
	-h	help


traj <output>

	Computes k-space trajectories.

	-x x	readout samples
	-y y	phase encoding lines
	-a a	acceleration
	-r	radial
	-h	help


ismrmrd <ismrm-file> <output>

	Import ISMRM raw data files.





References:


SENSE:

Pruessmann KP, Weiger M, Scheidegger MB, Boesiger P. SENSE: Sensitivity encoding
for fast MRI. Magn Reson Med 1999; 42:952-962.

Pruessmann KP, Weiger M, Boernert P, Boesiger P. Advances in sensitivity
encoding with arbitrary k-space trajectories. 
Magn Reson Med 2001; 46:638-651.


direct calibration:

McKenzie CA, Yeh EN, Ohliger MA, Price MD, Sodickson DK. Self-calibrating parallel
imaging with automatic coil sensitivity extraction. Magn Reson Med 2002; 47:529-538.


ESPIRiT:

Uecker M, Lai P, Murphy MJ, Virtue P, Elad M, Pauly JM, Vasanawala SS, Lustig M.
ESPIRiT - An Eigenvalue Approach to  Autocalibrating Parallel MRI: Where SENSE
meets GRAPPA. Magn Reson Med 2014; 71: 990-1001.


nonlinear inversion:

Uecker M, Hohage T, Block KT, Frahm J. Image reconstruction by regularized
nonlinear inversion—joint estimation of coil sensitivities and image content. 
Magn Reson Med 2008; 60:674-682.


SAKE:

Shin PJ, Larson PEZ, Ohliger MA, Elad M, Pauly JM, Vigneron DB, Lustig M. 
Calibrationless Parallel Imaging Reconstruction Based on Structured Low-Rank 
Matrix Completion. Magn Reson Med 2014; Epub

Bi Z, Uecker M, Jiang D, Lustig M, Ying K. Robust Low-rank Matrix Completion for 
sparse motion correction in auto calibration PI. Annual Meeting ISMRM, Salt Lake 
City 2013, In: Proc Intl Soc Mag Reson Med 21;2584


coil compression:

Huang F, Vijayakumar S, Li Y, Hertel S, Duensing GR. A software channel compression
technique for faster reconstruction with many channels. Magn Reson Imaging 2008; 26:133-141.

Buehrer M, Pruessmann KP, Boesiger P, Kozerke S. Array compression for MRI with large
coil arrays. Magn Reson Med 2007, 57: 1131-1139. 


